
AVRASM ver. 2.1.30  D:\Microprocessor-Laboratory\EX7\part1\code\Debug\List\part1.asm Fri Nov 19 10:09:02 2021

D:\Microprocessor-Laboratory\EX7\part1\code\Debug\List\part1.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Microprocessor-Laboratory\EX7\part1\code\Debug\List\part1.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Microprocessor-Laboratory\EX7\part1\code\Debug\List\part1.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 0031
00002b 0032
00002c 0033
00002d 0034      	.DB  0x31,0x0,0x32,0x0,0x33,0x0,0x34,0x0
00002e 0035
00002f 0036
000030 0037
000031 0038      	.DB  0x35,0x0,0x36,0x0,0x37,0x0,0x38,0x0
000032 0039
000033 0030      	.DB  0x39,0x0,0x30,0x0
                 _0x2000003:
000034 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000035 0002      	.DW  0x02
000036 0160      	.DW  __base_y_G100
000037 0068      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005f bfed      	OUT  SPL,R30
000060 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000063 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000064 940c 00fe 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;int key_pad(void)
                 ; 0000 0006 {
                 
                 	.CSEG
                 _key_pad:
                 ; .FSTART _key_pad
                 ; 0000 0007 PORTA.3=0;PORTA.4=1;PORTA.5=1;PORTA.6=1;
000066 98db      	CBI  0x1B,3
000067 9adc      	SBI  0x1B,4
000068 9add      	SBI  0x1B,5
000069 9ade      	SBI  0x1B,6
                 ; 0000 0008 if(!PINA.0) return 3;
00006a 99c8      	SBIC 0x19,0
00006b c003      	RJMP _0xB
00006c e0e3      	LDI  R30,LOW(3)
00006d e0f0      	LDI  R31,HIGH(3)
00006e 9508      	RET
                 ; 0000 0009 if(!PINA.1) return 2;
                 _0xB:
00006f 99c9      	SBIC 0x19,1
000070 c003      	RJMP _0xC
000071 e0e2      	LDI  R30,LOW(2)
000072 e0f0      	LDI  R31,HIGH(2)
000073 9508      	RET
                 ; 0000 000A if(!PINA.2) return 1;
                 _0xC:
000074 99ca      	SBIC 0x19,2
000075 c003      	RJMP _0xD
000076 e0e1      	LDI  R30,LOW(1)
000077 e0f0      	LDI  R31,HIGH(1)
000078 9508      	RET
                 ; 0000 000B PORTA.3=1;PORTA.4=0;PORTA.5=1;PORTA.6=1;
                 _0xD:
000079 9adb      	SBI  0x1B,3
00007a 98dc      	CBI  0x1B,4
00007b 9add      	SBI  0x1B,5
00007c 9ade      	SBI  0x1B,6
                 ; 0000 000C if(!PINA.0) return 6;
00007d 99c8      	SBIC 0x19,0
00007e c003      	RJMP _0x16
00007f e0e6      	LDI  R30,LOW(6)
000080 e0f0      	LDI  R31,HIGH(6)
000081 9508      	RET
                 ; 0000 000D if(!PINA.1) return 5;
                 _0x16:
000082 99c9      	SBIC 0x19,1
000083 c003      	RJMP _0x17
000084 e0e5      	LDI  R30,LOW(5)
000085 e0f0      	LDI  R31,HIGH(5)
000086 9508      	RET
                 ; 0000 000E if(!PINA.2) return 4;
                 _0x17:
000087 99ca      	SBIC 0x19,2
000088 c003      	RJMP _0x18
000089 e0e4      	LDI  R30,LOW(4)
00008a e0f0      	LDI  R31,HIGH(4)
00008b 9508      	RET
                 ; 0000 000F PORTA.3=1;PORTA.4=1;PORTA.5=0;PORTA.6=1;
                 _0x18:
00008c 9adb      	SBI  0x1B,3
00008d 9adc      	SBI  0x1B,4
00008e 98dd      	CBI  0x1B,5
00008f 9ade      	SBI  0x1B,6
                 ; 0000 0010 if(!PINA.0) return 9;
000090 99c8      	SBIC 0x19,0
000091 c003      	RJMP _0x21
000092 e0e9      	LDI  R30,LOW(9)
000093 e0f0      	LDI  R31,HIGH(9)
000094 9508      	RET
                 ; 0000 0011 if(!PINA.1) return 8;
                 _0x21:
000095 99c9      	SBIC 0x19,1
000096 c003      	RJMP _0x22
000097 e0e8      	LDI  R30,LOW(8)
000098 e0f0      	LDI  R31,HIGH(8)
000099 9508      	RET
                 ; 0000 0012 if(!PINA.2) return 7;
                 _0x22:
00009a 99ca      	SBIC 0x19,2
00009b c003      	RJMP _0x23
00009c e0e7      	LDI  R30,LOW(7)
00009d e0f0      	LDI  R31,HIGH(7)
00009e 9508      	RET
                 ; 0000 0013 PORTA.3=1;PORTA.4=1;PORTA.5=1;PORTA.6=0;
                 _0x23:
00009f 9adb      	SBI  0x1B,3
0000a0 9adc      	SBI  0x1B,4
0000a1 9add      	SBI  0x1B,5
0000a2 98de      	CBI  0x1B,6
                 ; 0000 0014 if(!PINA.1) return 0;
0000a3 99c9      	SBIC 0x19,1
0000a4 c003      	RJMP _0x2C
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 e0f0      	LDI  R31,HIGH(0)
0000a7 9508      	RET
                 ; 0000 0015 if(!PINA.2) return 10;
                 _0x2C:
0000a8 99ca      	SBIC 0x19,2
0000a9 c003      	RJMP _0x2D
0000aa e0ea      	LDI  R30,LOW(10)
0000ab e0f0      	LDI  R31,HIGH(10)
0000ac 9508      	RET
                 ; 0000 0016 return 12;
                 _0x2D:
0000ad e0ec      	LDI  R30,LOW(12)
0000ae e0f0      	LDI  R31,HIGH(12)
0000af 9508      	RET
                 ; 0000 0017 }
                 ; .FEND
                 ;
                 ;void lcd(int key)
                 ; 0000 001A {
                 _lcd:
                 ; .FSTART _lcd
                 ; 0000 001B if(key==1) lcd_putsf("1");
0000b0 93ba      	ST   -Y,R27
0000b1 93aa      	ST   -Y,R26
                 ;	key -> Y+0
0000b2 81a8      	LD   R26,Y
0000b3 81b9      	LDD  R27,Y+1
0000b4 9711      	SBIW R26,1
0000b5 f419      	BRNE _0x2E
                +
0000b6 e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000b7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000b8 d0aa      	RCALL _lcd_putsf
                 ; 0000 001C if(key==2) lcd_putsf("2");
                 _0x2E:
0000b9 81a8      	LD   R26,Y
0000ba 81b9      	LDD  R27,Y+1
0000bb 9712      	SBIW R26,2
0000bc f419      	BRNE _0x2F
                +
0000bd e5a6     +LDI R26 , LOW ( 2 * _0x0 + ( 2 ) )
0000be e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 2 ) )
                 	__POINTW2FN _0x0,2
0000bf d0a3      	RCALL _lcd_putsf
                 ; 0000 001D if(key==3) lcd_putsf("3");
                 _0x2F:
0000c0 81a8      	LD   R26,Y
0000c1 81b9      	LDD  R27,Y+1
0000c2 9713      	SBIW R26,3
0000c3 f419      	BRNE _0x30
                +
0000c4 e5a8     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
0000c5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
0000c6 d09c      	RCALL _lcd_putsf
                 ; 0000 001E if(key==4) lcd_putsf("4");
                 _0x30:
0000c7 81a8      	LD   R26,Y
0000c8 81b9      	LDD  R27,Y+1
0000c9 9714      	SBIW R26,4
0000ca f419      	BRNE _0x31
                +
0000cb e5aa     +LDI R26 , LOW ( 2 * _0x0 + ( 6 ) )
0000cc e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW2FN _0x0,6
0000cd d095      	RCALL _lcd_putsf
                 ; 0000 001F if(key==5) lcd_putsf("5");
                 _0x31:
0000ce 81a8      	LD   R26,Y
0000cf 81b9      	LDD  R27,Y+1
0000d0 9715      	SBIW R26,5
0000d1 f419      	BRNE _0x32
                +
0000d2 e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 8 ) )
0000d3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 8 ) )
                 	__POINTW2FN _0x0,8
0000d4 d08e      	RCALL _lcd_putsf
                 ; 0000 0020 if(key==6) lcd_putsf("6");
                 _0x32:
0000d5 81a8      	LD   R26,Y
0000d6 81b9      	LDD  R27,Y+1
0000d7 9716      	SBIW R26,6
0000d8 f419      	BRNE _0x33
                +
0000d9 e5ae     +LDI R26 , LOW ( 2 * _0x0 + ( 10 ) )
0000da e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW2FN _0x0,10
0000db d087      	RCALL _lcd_putsf
                 ; 0000 0021 if(key==7) lcd_putsf("7");
                 _0x33:
0000dc 81a8      	LD   R26,Y
0000dd 81b9      	LDD  R27,Y+1
0000de 9717      	SBIW R26,7
0000df f419      	BRNE _0x34
                +
0000e0 e6a0     +LDI R26 , LOW ( 2 * _0x0 + ( 12 ) )
0000e1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW2FN _0x0,12
0000e2 d080      	RCALL _lcd_putsf
                 ; 0000 0022 if(key==8) lcd_putsf("8");
                 _0x34:
0000e3 81a8      	LD   R26,Y
0000e4 81b9      	LDD  R27,Y+1
0000e5 9718      	SBIW R26,8
0000e6 f419      	BRNE _0x35
                +
0000e7 e6a2     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
0000e8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
0000e9 d079      	RCALL _lcd_putsf
                 ; 0000 0023 if(key==9) lcd_putsf("9");
                 _0x35:
0000ea 81a8      	LD   R26,Y
0000eb 81b9      	LDD  R27,Y+1
0000ec 9719      	SBIW R26,9
0000ed f419      	BRNE _0x36
                +
0000ee e6a4     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
0000ef e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
0000f0 d072      	RCALL _lcd_putsf
                 ; 0000 0024 if(key==0) lcd_putsf("0");
                 _0x36:
0000f1 81e8      	LD   R30,Y
0000f2 81f9      	LDD  R31,Y+1
0000f3 9730      	SBIW R30,0
0000f4 f419      	BRNE _0x37
                +
0000f5 e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 18 ) )
0000f6 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 18 ) )
                 	__POINTW2FN _0x0,18
0000f7 d06b      	RCALL _lcd_putsf
                 ; 0000 0025 if(key==10) lcd_clear();
                 _0x37:
0000f8 81a8      	LD   R26,Y
0000f9 81b9      	LDD  R27,Y+1
0000fa 971a      	SBIW R26,10
0000fb f409      	BRNE _0x38
0000fc d047      	RCALL _lcd_clear
                 ; 0000 0026 
                 ; 0000 0027 }
                 _0x38:
0000fd c044      	RJMP _0x2020002
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002A {
                 _main:
                 ; .FSTART _main
                 ; 0000 002B  int key ;
                 ; 0000 002C 
                 ; 0000 002D DDRA=(0<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
                 ;	key -> R16,R17
0000fe e7e8      	LDI  R30,LOW(120)
0000ff bbea      	OUT  0x1A,R30
                 ; 0000 002E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
000100 e0e7      	LDI  R30,LOW(7)
000101 bbeb      	OUT  0x1B,R30
                 ; 0000 002F DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000102 efef      	LDI  R30,LOW(255)
000103 bbe4      	OUT  0x14,R30
                 ; 0000 0030 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000104 e0e0      	LDI  R30,LOW(0)
000105 bbe5      	OUT  0x15,R30
                 ; 0000 0031 lcd_init(16);
000106 e1a0      	LDI  R26,LOW(16)
000107 d06e      	RCALL _lcd_init
                 ; 0000 0032 
                 ; 0000 0033 while (1)
                 _0x39:
                 ; 0000 0034       {
                 ; 0000 0035       do
                 _0x3D:
                 ; 0000 0036       key=key_pad();
000108 df5d      	RCALL _key_pad
000109 018f      	MOVW R16,R30
                 ; 0000 0037       while(key==12);
00010a e0ec      	LDI  R30,LOW(12)
00010b e0f0      	LDI  R31,HIGH(12)
00010c 17e0      	CP   R30,R16
00010d 07f1      	CPC  R31,R17
00010e f3c9      	BREQ _0x3D
                 ; 0000 0038       lcd(key);
00010f 01d8      	MOVW R26,R16
000110 df9f      	RCALL _lcd
                 ; 0000 0039       delay_ms(350);
000111 e5ae      	LDI  R26,LOW(350)
000112 e0b1      	LDI  R27,HIGH(350)
000113 940e 01ab 	CALL _delay_ms
                 ; 0000 003A       }
000115 cff2      	RJMP _0x39
                 ; 0000 003B }
                 _0x3F:
000116 cfff      	RJMP _0x3F
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000117 93aa      	ST   -Y,R26
000118 b3eb      	IN   R30,0x1B
000119 70ef      	ANDI R30,LOW(0xF)
00011a 2fae      	MOV  R26,R30
00011b 81e8      	LD   R30,Y
00011c 7fe0      	ANDI R30,LOW(0xF0)
00011d 2bea      	OR   R30,R26
00011e bbeb      	OUT  0x1B,R30
                +
00011f e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000120 958a     +DEC R24
000121 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000122 9ada      	SBI  0x1B,2
                +
000123 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000124 958a     +DEC R24
000125 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000126 98da      	CBI  0x1B,2
                +
000127 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000128 958a     +DEC R24
000129 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00012a c073      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00012b 93aa      	ST   -Y,R26
00012c 81a8      	LD   R26,Y
00012d dfe9      	RCALL __lcd_write_nibble_G100
00012e 81e8          ld    r30,y
00012f 95e2          swap  r30
000130 83e8          st    y,r30
000131 81a8      	LD   R26,Y
000132 dfe4      	RCALL __lcd_write_nibble_G100
                +
000133 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000134 958a     +DEC R24
000135 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000136 c067      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000137 93aa      	ST   -Y,R26
000138 81e8      	LD   R30,Y
000139 e0f0      	LDI  R31,0
00013a 5ae0      	SUBI R30,LOW(-__base_y_G100)
00013b 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00013c 81e0      	LD   R30,Z
00013d 81a9      	LDD  R26,Y+1
00013e 0fae      	ADD  R26,R30
00013f dfeb      	RCALL __lcd_write_data
000140 8059      	LDD  R5,Y+1
000141 8048      	LDD  R4,Y+0
                 _0x2020002:
000142 9622      	ADIW R28,2
000143 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000144 e0a2      	LDI  R26,LOW(2)
000145 d05a      	RCALL SUBOPT_0x0
000146 e0ac      	LDI  R26,LOW(12)
000147 dfe3      	RCALL __lcd_write_data
000148 e0a1      	LDI  R26,LOW(1)
000149 d056      	RCALL SUBOPT_0x0
00014a e0e0      	LDI  R30,LOW(0)
00014b 2e4e      	MOV  R4,R30
00014c 2e5e      	MOV  R5,R30
00014d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00014e 93aa      	ST   -Y,R26
00014f 81a8      	LD   R26,Y
000150 30aa      	CPI  R26,LOW(0xA)
000151 f011      	BREQ _0x2000005
000152 1457      	CP   R5,R7
000153 f048      	BRLO _0x2000004
                 _0x2000005:
000154 e0e0      	LDI  R30,LOW(0)
000155 93ea      	ST   -Y,R30
000156 9443      	INC  R4
000157 2da4      	MOV  R26,R4
000158 dfde      	RCALL _lcd_gotoxy
000159 81a8      	LD   R26,Y
00015a 30aa      	CPI  R26,LOW(0xA)
00015b f409      	BRNE _0x2000007
00015c c041      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
00015d 9453      	INC  R5
00015e 9ad8      	SBI  0x1B,0
00015f 81a8      	LD   R26,Y
000160 dfca      	RCALL __lcd_write_data
000161 98d8      	CBI  0x1B,0
000162 c03b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000163 93ba      	ST   -Y,R27
000164 93aa      	ST   -Y,R26
000165 931a      	ST   -Y,R17
                 _0x200000B:
000166 81e9      	LDD  R30,Y+1
000167 81fa      	LDD  R31,Y+1+1
000168 9631      	ADIW R30,1
000169 83e9      	STD  Y+1,R30
00016a 83fa      	STD  Y+1+1,R31
00016b 9731      	SBIW R30,1
00016c 91e4      	LPM  R30,Z
00016d 2f1e      	MOV  R17,R30
00016e 30e0      	CPI  R30,0
00016f f019      	BREQ _0x200000D
000170 2fa1      	MOV  R26,R17
000171 dfdc      	RCALL _lcd_putchar
000172 cff3      	RJMP _0x200000B
                 _0x200000D:
000173 8118      	LDD  R17,Y+0
000174 9623      	ADIW R28,3
000175 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000176 93aa      	ST   -Y,R26
000177 b3ea      	IN   R30,0x1A
000178 6fe0      	ORI  R30,LOW(0xF0)
000179 bbea      	OUT  0x1A,R30
00017a 9ad2      	SBI  0x1A,2
00017b 9ad0      	SBI  0x1A,0
00017c 9ad1      	SBI  0x1A,1
00017d 98da      	CBI  0x1B,2
00017e 98d8      	CBI  0x1B,0
00017f 98d9      	CBI  0x1B,1
000180 8078      	LDD  R7,Y+0
000181 81e8      	LD   R30,Y
000182 58e0      	SUBI R30,-LOW(128)
                +
000183 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000185 81e8      	LD   R30,Y
000186 54e0      	SUBI R30,-LOW(192)
                +
000187 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000189 e1a4      	LDI  R26,LOW(20)
00018a e0b0      	LDI  R27,0
00018b 940e 01ab 	CALL _delay_ms
00018d d017      	RCALL SUBOPT_0x1
00018e d016      	RCALL SUBOPT_0x1
00018f d015      	RCALL SUBOPT_0x1
000190 e2a0      	LDI  R26,LOW(32)
000191 df85      	RCALL __lcd_write_nibble_G100
                +
000192 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000193 958a     +DEC R24
000194 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000195 e2a8      	LDI  R26,LOW(40)
000196 df94      	RCALL __lcd_write_data
000197 e0a4      	LDI  R26,LOW(4)
000198 df92      	RCALL __lcd_write_data
000199 e8a5      	LDI  R26,LOW(133)
00019a df90      	RCALL __lcd_write_data
00019b e0a6      	LDI  R26,LOW(6)
00019c df8e      	RCALL __lcd_write_data
00019d dfa6      	RCALL _lcd_clear
                 _0x2020001:
00019e 9621      	ADIW R28,1
00019f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001a0 df8a      	RCALL __lcd_write_data
0001a1 e0a3      	LDI  R26,LOW(3)
0001a2 e0b0      	LDI  R27,0
0001a3 940c 01ab 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0001a5 e3a0      	LDI  R26,LOW(48)
0001a6 df70      	RCALL __lcd_write_nibble_G100
                +
0001a7 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0001a8 958a     +DEC R24
0001a9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0001aa 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001ab 9610      	adiw r26,0
0001ac f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ad ef8a     +LDI R24 , LOW ( 0xFA )
0001ae e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001af 9701     +SBIW R24 , 1
0001b0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001b1 95a8      	wdr
0001b2 9711      	sbiw r26,1
0001b3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b4 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   3 r17:   5 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   3 r26:  69 r27:  27 r28:   4 r29:   1 r30:  74 r31:  22 
x  :   3 y  :  53 z  :   9 
Registers used: 19 out of 35 (54.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   5 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  23 ld    :  22 ldd   :  18 ldi   :  89 
lds   :   0 lpm   :   9 lsl   :   0 lsr   :   0 mov   :   6 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  12 pop   :   0 push  :   0 rcall :  34 ret   :  18 
reti  :   0 rjmp  :  20 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :  17 sbic  :  11 sbis  :   0 sbiw  :  17 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   2 sts   :   2 sub   :   0 subi  :   3 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 39 out of 116 (33.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00036a    844     30    874   16384   5.3%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
